
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `GameBank` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model GameBank
 * 
 */
export type GameBankModel = runtime.Types.Result.DefaultSelection<Prisma.$GameBankPayload>

export type AggregateGameBank = {
  _count: GameBankCountAggregateOutputType | null
  _avg: GameBankAvgAggregateOutputType | null
  _sum: GameBankSumAggregateOutputType | null
  _min: GameBankMinAggregateOutputType | null
  _max: GameBankMaxAggregateOutputType | null
}

export type GameBankAvgAggregateOutputType = {
  slots: number | null
  little: number | null
  table_bank: number | null
  bonus: number | null
  temp_rtp: number | null
}

export type GameBankSumAggregateOutputType = {
  slots: number | null
  little: number | null
  table_bank: number | null
  bonus: number | null
  temp_rtp: number | null
}

export type GameBankMinAggregateOutputType = {
  id: string | null
  slots: number | null
  little: number | null
  table_bank: number | null
  bonus: number | null
  temp_rtp: number | null
  shop_id: string | null
}

export type GameBankMaxAggregateOutputType = {
  id: string | null
  slots: number | null
  little: number | null
  table_bank: number | null
  bonus: number | null
  temp_rtp: number | null
  shop_id: string | null
}

export type GameBankCountAggregateOutputType = {
  id: number
  slots: number
  little: number
  table_bank: number
  bonus: number
  temp_rtp: number
  shop_id: number
  _all: number
}


export type GameBankAvgAggregateInputType = {
  slots?: true
  little?: true
  table_bank?: true
  bonus?: true
  temp_rtp?: true
}

export type GameBankSumAggregateInputType = {
  slots?: true
  little?: true
  table_bank?: true
  bonus?: true
  temp_rtp?: true
}

export type GameBankMinAggregateInputType = {
  id?: true
  slots?: true
  little?: true
  table_bank?: true
  bonus?: true
  temp_rtp?: true
  shop_id?: true
}

export type GameBankMaxAggregateInputType = {
  id?: true
  slots?: true
  little?: true
  table_bank?: true
  bonus?: true
  temp_rtp?: true
  shop_id?: true
}

export type GameBankCountAggregateInputType = {
  id?: true
  slots?: true
  little?: true
  table_bank?: true
  bonus?: true
  temp_rtp?: true
  shop_id?: true
  _all?: true
}

export type GameBankAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which GameBank to aggregate.
   */
  where?: Prisma.GameBankWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of GameBanks to fetch.
   */
  orderBy?: Prisma.GameBankOrderByWithRelationInput | Prisma.GameBankOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.GameBankWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` GameBanks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` GameBanks.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned GameBanks
  **/
  _count?: true | GameBankCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: GameBankAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: GameBankSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: GameBankMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: GameBankMaxAggregateInputType
}

export type GetGameBankAggregateType<T extends GameBankAggregateArgs> = {
      [P in keyof T & keyof AggregateGameBank]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateGameBank[P]>
    : Prisma.GetScalarType<T[P], AggregateGameBank[P]>
}




export type GameBankGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.GameBankWhereInput
  orderBy?: Prisma.GameBankOrderByWithAggregationInput | Prisma.GameBankOrderByWithAggregationInput[]
  by: Prisma.GameBankScalarFieldEnum[] | Prisma.GameBankScalarFieldEnum
  having?: Prisma.GameBankScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: GameBankCountAggregateInputType | true
  _avg?: GameBankAvgAggregateInputType
  _sum?: GameBankSumAggregateInputType
  _min?: GameBankMinAggregateInputType
  _max?: GameBankMaxAggregateInputType
}

export type GameBankGroupByOutputType = {
  id: string
  slots: number
  little: number
  table_bank: number
  bonus: number
  temp_rtp: number | null
  shop_id: string
  _count: GameBankCountAggregateOutputType | null
  _avg: GameBankAvgAggregateOutputType | null
  _sum: GameBankSumAggregateOutputType | null
  _min: GameBankMinAggregateOutputType | null
  _max: GameBankMaxAggregateOutputType | null
}

type GetGameBankGroupByPayload<T extends GameBankGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<GameBankGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof GameBankGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], GameBankGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], GameBankGroupByOutputType[P]>
      }
    >
  > 



export type GameBankWhereInput = {
  AND?: Prisma.GameBankWhereInput | Prisma.GameBankWhereInput[]
  OR?: Prisma.GameBankWhereInput[]
  NOT?: Prisma.GameBankWhereInput | Prisma.GameBankWhereInput[]
  id?: Prisma.StringFilter<"GameBank"> | string
  slots?: Prisma.FloatFilter<"GameBank"> | number
  little?: Prisma.FloatFilter<"GameBank"> | number
  table_bank?: Prisma.FloatFilter<"GameBank"> | number
  bonus?: Prisma.FloatFilter<"GameBank"> | number
  temp_rtp?: Prisma.FloatNullableFilter<"GameBank"> | number | null
  shop_id?: Prisma.StringFilter<"GameBank"> | string
  shop?: Prisma.XOR<Prisma.ShopScalarRelationFilter, Prisma.ShopWhereInput>
}

export type GameBankOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  slots?: Prisma.SortOrder
  little?: Prisma.SortOrder
  table_bank?: Prisma.SortOrder
  bonus?: Prisma.SortOrder
  temp_rtp?: Prisma.SortOrderInput | Prisma.SortOrder
  shop_id?: Prisma.SortOrder
  shop?: Prisma.ShopOrderByWithRelationInput
}

export type GameBankWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  shop_id?: string
  AND?: Prisma.GameBankWhereInput | Prisma.GameBankWhereInput[]
  OR?: Prisma.GameBankWhereInput[]
  NOT?: Prisma.GameBankWhereInput | Prisma.GameBankWhereInput[]
  slots?: Prisma.FloatFilter<"GameBank"> | number
  little?: Prisma.FloatFilter<"GameBank"> | number
  table_bank?: Prisma.FloatFilter<"GameBank"> | number
  bonus?: Prisma.FloatFilter<"GameBank"> | number
  temp_rtp?: Prisma.FloatNullableFilter<"GameBank"> | number | null
  shop?: Prisma.XOR<Prisma.ShopScalarRelationFilter, Prisma.ShopWhereInput>
}, "id" | "shop_id">

export type GameBankOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  slots?: Prisma.SortOrder
  little?: Prisma.SortOrder
  table_bank?: Prisma.SortOrder
  bonus?: Prisma.SortOrder
  temp_rtp?: Prisma.SortOrderInput | Prisma.SortOrder
  shop_id?: Prisma.SortOrder
  _count?: Prisma.GameBankCountOrderByAggregateInput
  _avg?: Prisma.GameBankAvgOrderByAggregateInput
  _max?: Prisma.GameBankMaxOrderByAggregateInput
  _min?: Prisma.GameBankMinOrderByAggregateInput
  _sum?: Prisma.GameBankSumOrderByAggregateInput
}

export type GameBankScalarWhereWithAggregatesInput = {
  AND?: Prisma.GameBankScalarWhereWithAggregatesInput | Prisma.GameBankScalarWhereWithAggregatesInput[]
  OR?: Prisma.GameBankScalarWhereWithAggregatesInput[]
  NOT?: Prisma.GameBankScalarWhereWithAggregatesInput | Prisma.GameBankScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"GameBank"> | string
  slots?: Prisma.FloatWithAggregatesFilter<"GameBank"> | number
  little?: Prisma.FloatWithAggregatesFilter<"GameBank"> | number
  table_bank?: Prisma.FloatWithAggregatesFilter<"GameBank"> | number
  bonus?: Prisma.FloatWithAggregatesFilter<"GameBank"> | number
  temp_rtp?: Prisma.FloatNullableWithAggregatesFilter<"GameBank"> | number | null
  shop_id?: Prisma.StringWithAggregatesFilter<"GameBank"> | string
}

export type GameBankCreateInput = {
  id?: string
  slots?: number
  little?: number
  table_bank?: number
  bonus?: number
  temp_rtp?: number | null
  shop: Prisma.ShopCreateNestedOneWithoutGameBanksInput
}

export type GameBankUncheckedCreateInput = {
  id?: string
  slots?: number
  little?: number
  table_bank?: number
  bonus?: number
  temp_rtp?: number | null
  shop_id: string
}

export type GameBankUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  slots?: Prisma.FloatFieldUpdateOperationsInput | number
  little?: Prisma.FloatFieldUpdateOperationsInput | number
  table_bank?: Prisma.FloatFieldUpdateOperationsInput | number
  bonus?: Prisma.FloatFieldUpdateOperationsInput | number
  temp_rtp?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  shop?: Prisma.ShopUpdateOneRequiredWithoutGameBanksNestedInput
}

export type GameBankUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  slots?: Prisma.FloatFieldUpdateOperationsInput | number
  little?: Prisma.FloatFieldUpdateOperationsInput | number
  table_bank?: Prisma.FloatFieldUpdateOperationsInput | number
  bonus?: Prisma.FloatFieldUpdateOperationsInput | number
  temp_rtp?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  shop_id?: Prisma.StringFieldUpdateOperationsInput | string
}

export type GameBankCreateManyInput = {
  id?: string
  slots?: number
  little?: number
  table_bank?: number
  bonus?: number
  temp_rtp?: number | null
  shop_id: string
}

export type GameBankUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  slots?: Prisma.FloatFieldUpdateOperationsInput | number
  little?: Prisma.FloatFieldUpdateOperationsInput | number
  table_bank?: Prisma.FloatFieldUpdateOperationsInput | number
  bonus?: Prisma.FloatFieldUpdateOperationsInput | number
  temp_rtp?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
}

export type GameBankUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  slots?: Prisma.FloatFieldUpdateOperationsInput | number
  little?: Prisma.FloatFieldUpdateOperationsInput | number
  table_bank?: Prisma.FloatFieldUpdateOperationsInput | number
  bonus?: Prisma.FloatFieldUpdateOperationsInput | number
  temp_rtp?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
  shop_id?: Prisma.StringFieldUpdateOperationsInput | string
}

export type GameBankCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  slots?: Prisma.SortOrder
  little?: Prisma.SortOrder
  table_bank?: Prisma.SortOrder
  bonus?: Prisma.SortOrder
  temp_rtp?: Prisma.SortOrder
  shop_id?: Prisma.SortOrder
}

export type GameBankAvgOrderByAggregateInput = {
  slots?: Prisma.SortOrder
  little?: Prisma.SortOrder
  table_bank?: Prisma.SortOrder
  bonus?: Prisma.SortOrder
  temp_rtp?: Prisma.SortOrder
}

export type GameBankMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  slots?: Prisma.SortOrder
  little?: Prisma.SortOrder
  table_bank?: Prisma.SortOrder
  bonus?: Prisma.SortOrder
  temp_rtp?: Prisma.SortOrder
  shop_id?: Prisma.SortOrder
}

export type GameBankMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  slots?: Prisma.SortOrder
  little?: Prisma.SortOrder
  table_bank?: Prisma.SortOrder
  bonus?: Prisma.SortOrder
  temp_rtp?: Prisma.SortOrder
  shop_id?: Prisma.SortOrder
}

export type GameBankSumOrderByAggregateInput = {
  slots?: Prisma.SortOrder
  little?: Prisma.SortOrder
  table_bank?: Prisma.SortOrder
  bonus?: Prisma.SortOrder
  temp_rtp?: Prisma.SortOrder
}

export type GameBankListRelationFilter = {
  every?: Prisma.GameBankWhereInput
  some?: Prisma.GameBankWhereInput
  none?: Prisma.GameBankWhereInput
}

export type GameBankOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type FloatFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type NullableFloatFieldUpdateOperationsInput = {
  set?: number | null
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type GameBankCreateNestedManyWithoutShopInput = {
  create?: Prisma.XOR<Prisma.GameBankCreateWithoutShopInput, Prisma.GameBankUncheckedCreateWithoutShopInput> | Prisma.GameBankCreateWithoutShopInput[] | Prisma.GameBankUncheckedCreateWithoutShopInput[]
  connectOrCreate?: Prisma.GameBankCreateOrConnectWithoutShopInput | Prisma.GameBankCreateOrConnectWithoutShopInput[]
  createMany?: Prisma.GameBankCreateManyShopInputEnvelope
  connect?: Prisma.GameBankWhereUniqueInput | Prisma.GameBankWhereUniqueInput[]
}

export type GameBankUncheckedCreateNestedManyWithoutShopInput = {
  create?: Prisma.XOR<Prisma.GameBankCreateWithoutShopInput, Prisma.GameBankUncheckedCreateWithoutShopInput> | Prisma.GameBankCreateWithoutShopInput[] | Prisma.GameBankUncheckedCreateWithoutShopInput[]
  connectOrCreate?: Prisma.GameBankCreateOrConnectWithoutShopInput | Prisma.GameBankCreateOrConnectWithoutShopInput[]
  createMany?: Prisma.GameBankCreateManyShopInputEnvelope
  connect?: Prisma.GameBankWhereUniqueInput | Prisma.GameBankWhereUniqueInput[]
}

export type GameBankUpdateManyWithoutShopNestedInput = {
  create?: Prisma.XOR<Prisma.GameBankCreateWithoutShopInput, Prisma.GameBankUncheckedCreateWithoutShopInput> | Prisma.GameBankCreateWithoutShopInput[] | Prisma.GameBankUncheckedCreateWithoutShopInput[]
  connectOrCreate?: Prisma.GameBankCreateOrConnectWithoutShopInput | Prisma.GameBankCreateOrConnectWithoutShopInput[]
  upsert?: Prisma.GameBankUpsertWithWhereUniqueWithoutShopInput | Prisma.GameBankUpsertWithWhereUniqueWithoutShopInput[]
  createMany?: Prisma.GameBankCreateManyShopInputEnvelope
  set?: Prisma.GameBankWhereUniqueInput | Prisma.GameBankWhereUniqueInput[]
  disconnect?: Prisma.GameBankWhereUniqueInput | Prisma.GameBankWhereUniqueInput[]
  delete?: Prisma.GameBankWhereUniqueInput | Prisma.GameBankWhereUniqueInput[]
  connect?: Prisma.GameBankWhereUniqueInput | Prisma.GameBankWhereUniqueInput[]
  update?: Prisma.GameBankUpdateWithWhereUniqueWithoutShopInput | Prisma.GameBankUpdateWithWhereUniqueWithoutShopInput[]
  updateMany?: Prisma.GameBankUpdateManyWithWhereWithoutShopInput | Prisma.GameBankUpdateManyWithWhereWithoutShopInput[]
  deleteMany?: Prisma.GameBankScalarWhereInput | Prisma.GameBankScalarWhereInput[]
}

export type GameBankUncheckedUpdateManyWithoutShopNestedInput = {
  create?: Prisma.XOR<Prisma.GameBankCreateWithoutShopInput, Prisma.GameBankUncheckedCreateWithoutShopInput> | Prisma.GameBankCreateWithoutShopInput[] | Prisma.GameBankUncheckedCreateWithoutShopInput[]
  connectOrCreate?: Prisma.GameBankCreateOrConnectWithoutShopInput | Prisma.GameBankCreateOrConnectWithoutShopInput[]
  upsert?: Prisma.GameBankUpsertWithWhereUniqueWithoutShopInput | Prisma.GameBankUpsertWithWhereUniqueWithoutShopInput[]
  createMany?: Prisma.GameBankCreateManyShopInputEnvelope
  set?: Prisma.GameBankWhereUniqueInput | Prisma.GameBankWhereUniqueInput[]
  disconnect?: Prisma.GameBankWhereUniqueInput | Prisma.GameBankWhereUniqueInput[]
  delete?: Prisma.GameBankWhereUniqueInput | Prisma.GameBankWhereUniqueInput[]
  connect?: Prisma.GameBankWhereUniqueInput | Prisma.GameBankWhereUniqueInput[]
  update?: Prisma.GameBankUpdateWithWhereUniqueWithoutShopInput | Prisma.GameBankUpdateWithWhereUniqueWithoutShopInput[]
  updateMany?: Prisma.GameBankUpdateManyWithWhereWithoutShopInput | Prisma.GameBankUpdateManyWithWhereWithoutShopInput[]
  deleteMany?: Prisma.GameBankScalarWhereInput | Prisma.GameBankScalarWhereInput[]
}

export type GameBankCreateWithoutShopInput = {
  id?: string
  slots?: number
  little?: number
  table_bank?: number
  bonus?: number
  temp_rtp?: number | null
}

export type GameBankUncheckedCreateWithoutShopInput = {
  id?: string
  slots?: number
  little?: number
  table_bank?: number
  bonus?: number
  temp_rtp?: number | null
}

export type GameBankCreateOrConnectWithoutShopInput = {
  where: Prisma.GameBankWhereUniqueInput
  create: Prisma.XOR<Prisma.GameBankCreateWithoutShopInput, Prisma.GameBankUncheckedCreateWithoutShopInput>
}

export type GameBankCreateManyShopInputEnvelope = {
  data: Prisma.GameBankCreateManyShopInput | Prisma.GameBankCreateManyShopInput[]
  skipDuplicates?: boolean
}

export type GameBankUpsertWithWhereUniqueWithoutShopInput = {
  where: Prisma.GameBankWhereUniqueInput
  update: Prisma.XOR<Prisma.GameBankUpdateWithoutShopInput, Prisma.GameBankUncheckedUpdateWithoutShopInput>
  create: Prisma.XOR<Prisma.GameBankCreateWithoutShopInput, Prisma.GameBankUncheckedCreateWithoutShopInput>
}

export type GameBankUpdateWithWhereUniqueWithoutShopInput = {
  where: Prisma.GameBankWhereUniqueInput
  data: Prisma.XOR<Prisma.GameBankUpdateWithoutShopInput, Prisma.GameBankUncheckedUpdateWithoutShopInput>
}

export type GameBankUpdateManyWithWhereWithoutShopInput = {
  where: Prisma.GameBankScalarWhereInput
  data: Prisma.XOR<Prisma.GameBankUpdateManyMutationInput, Prisma.GameBankUncheckedUpdateManyWithoutShopInput>
}

export type GameBankScalarWhereInput = {
  AND?: Prisma.GameBankScalarWhereInput | Prisma.GameBankScalarWhereInput[]
  OR?: Prisma.GameBankScalarWhereInput[]
  NOT?: Prisma.GameBankScalarWhereInput | Prisma.GameBankScalarWhereInput[]
  id?: Prisma.StringFilter<"GameBank"> | string
  slots?: Prisma.FloatFilter<"GameBank"> | number
  little?: Prisma.FloatFilter<"GameBank"> | number
  table_bank?: Prisma.FloatFilter<"GameBank"> | number
  bonus?: Prisma.FloatFilter<"GameBank"> | number
  temp_rtp?: Prisma.FloatNullableFilter<"GameBank"> | number | null
  shop_id?: Prisma.StringFilter<"GameBank"> | string
}

export type GameBankCreateManyShopInput = {
  id?: string
  slots?: number
  little?: number
  table_bank?: number
  bonus?: number
  temp_rtp?: number | null
}

export type GameBankUpdateWithoutShopInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  slots?: Prisma.FloatFieldUpdateOperationsInput | number
  little?: Prisma.FloatFieldUpdateOperationsInput | number
  table_bank?: Prisma.FloatFieldUpdateOperationsInput | number
  bonus?: Prisma.FloatFieldUpdateOperationsInput | number
  temp_rtp?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
}

export type GameBankUncheckedUpdateWithoutShopInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  slots?: Prisma.FloatFieldUpdateOperationsInput | number
  little?: Prisma.FloatFieldUpdateOperationsInput | number
  table_bank?: Prisma.FloatFieldUpdateOperationsInput | number
  bonus?: Prisma.FloatFieldUpdateOperationsInput | number
  temp_rtp?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
}

export type GameBankUncheckedUpdateManyWithoutShopInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  slots?: Prisma.FloatFieldUpdateOperationsInput | number
  little?: Prisma.FloatFieldUpdateOperationsInput | number
  table_bank?: Prisma.FloatFieldUpdateOperationsInput | number
  bonus?: Prisma.FloatFieldUpdateOperationsInput | number
  temp_rtp?: Prisma.NullableFloatFieldUpdateOperationsInput | number | null
}



export type GameBankSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  slots?: boolean
  little?: boolean
  table_bank?: boolean
  bonus?: boolean
  temp_rtp?: boolean
  shop_id?: boolean
  shop?: boolean | Prisma.ShopDefaultArgs<ExtArgs>
}, ExtArgs["result"]["gameBank"]>

export type GameBankSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  slots?: boolean
  little?: boolean
  table_bank?: boolean
  bonus?: boolean
  temp_rtp?: boolean
  shop_id?: boolean
  shop?: boolean | Prisma.ShopDefaultArgs<ExtArgs>
}, ExtArgs["result"]["gameBank"]>

export type GameBankSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  slots?: boolean
  little?: boolean
  table_bank?: boolean
  bonus?: boolean
  temp_rtp?: boolean
  shop_id?: boolean
  shop?: boolean | Prisma.ShopDefaultArgs<ExtArgs>
}, ExtArgs["result"]["gameBank"]>

export type GameBankSelectScalar = {
  id?: boolean
  slots?: boolean
  little?: boolean
  table_bank?: boolean
  bonus?: boolean
  temp_rtp?: boolean
  shop_id?: boolean
}

export type GameBankOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "slots" | "little" | "table_bank" | "bonus" | "temp_rtp" | "shop_id", ExtArgs["result"]["gameBank"]>
export type GameBankInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  shop?: boolean | Prisma.ShopDefaultArgs<ExtArgs>
}
export type GameBankIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  shop?: boolean | Prisma.ShopDefaultArgs<ExtArgs>
}
export type GameBankIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  shop?: boolean | Prisma.ShopDefaultArgs<ExtArgs>
}

export type $GameBankPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "GameBank"
  objects: {
    shop: Prisma.$ShopPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    slots: number
    little: number
    table_bank: number
    bonus: number
    temp_rtp: number | null
    shop_id: string
  }, ExtArgs["result"]["gameBank"]>
  composites: {}
}

export type GameBankGetPayload<S extends boolean | null | undefined | GameBankDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$GameBankPayload, S>

export type GameBankCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<GameBankFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: GameBankCountAggregateInputType | true
  }

export interface GameBankDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GameBank'], meta: { name: 'GameBank' } }
  /**
   * Find zero or one GameBank that matches the filter.
   * @param {GameBankFindUniqueArgs} args - Arguments to find a GameBank
   * @example
   * // Get one GameBank
   * const gameBank = await prisma.gameBank.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends GameBankFindUniqueArgs>(args: Prisma.SelectSubset<T, GameBankFindUniqueArgs<ExtArgs>>): Prisma.Prisma__GameBankClient<runtime.Types.Result.GetResult<Prisma.$GameBankPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one GameBank that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {GameBankFindUniqueOrThrowArgs} args - Arguments to find a GameBank
   * @example
   * // Get one GameBank
   * const gameBank = await prisma.gameBank.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends GameBankFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, GameBankFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__GameBankClient<runtime.Types.Result.GetResult<Prisma.$GameBankPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first GameBank that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GameBankFindFirstArgs} args - Arguments to find a GameBank
   * @example
   * // Get one GameBank
   * const gameBank = await prisma.gameBank.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends GameBankFindFirstArgs>(args?: Prisma.SelectSubset<T, GameBankFindFirstArgs<ExtArgs>>): Prisma.Prisma__GameBankClient<runtime.Types.Result.GetResult<Prisma.$GameBankPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first GameBank that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GameBankFindFirstOrThrowArgs} args - Arguments to find a GameBank
   * @example
   * // Get one GameBank
   * const gameBank = await prisma.gameBank.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends GameBankFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, GameBankFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__GameBankClient<runtime.Types.Result.GetResult<Prisma.$GameBankPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more GameBanks that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GameBankFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all GameBanks
   * const gameBanks = await prisma.gameBank.findMany()
   * 
   * // Get first 10 GameBanks
   * const gameBanks = await prisma.gameBank.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const gameBankWithIdOnly = await prisma.gameBank.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends GameBankFindManyArgs>(args?: Prisma.SelectSubset<T, GameBankFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GameBankPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a GameBank.
   * @param {GameBankCreateArgs} args - Arguments to create a GameBank.
   * @example
   * // Create one GameBank
   * const GameBank = await prisma.gameBank.create({
   *   data: {
   *     // ... data to create a GameBank
   *   }
   * })
   * 
   */
  create<T extends GameBankCreateArgs>(args: Prisma.SelectSubset<T, GameBankCreateArgs<ExtArgs>>): Prisma.Prisma__GameBankClient<runtime.Types.Result.GetResult<Prisma.$GameBankPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many GameBanks.
   * @param {GameBankCreateManyArgs} args - Arguments to create many GameBanks.
   * @example
   * // Create many GameBanks
   * const gameBank = await prisma.gameBank.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends GameBankCreateManyArgs>(args?: Prisma.SelectSubset<T, GameBankCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many GameBanks and returns the data saved in the database.
   * @param {GameBankCreateManyAndReturnArgs} args - Arguments to create many GameBanks.
   * @example
   * // Create many GameBanks
   * const gameBank = await prisma.gameBank.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many GameBanks and only return the `id`
   * const gameBankWithIdOnly = await prisma.gameBank.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends GameBankCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, GameBankCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GameBankPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a GameBank.
   * @param {GameBankDeleteArgs} args - Arguments to delete one GameBank.
   * @example
   * // Delete one GameBank
   * const GameBank = await prisma.gameBank.delete({
   *   where: {
   *     // ... filter to delete one GameBank
   *   }
   * })
   * 
   */
  delete<T extends GameBankDeleteArgs>(args: Prisma.SelectSubset<T, GameBankDeleteArgs<ExtArgs>>): Prisma.Prisma__GameBankClient<runtime.Types.Result.GetResult<Prisma.$GameBankPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one GameBank.
   * @param {GameBankUpdateArgs} args - Arguments to update one GameBank.
   * @example
   * // Update one GameBank
   * const gameBank = await prisma.gameBank.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends GameBankUpdateArgs>(args: Prisma.SelectSubset<T, GameBankUpdateArgs<ExtArgs>>): Prisma.Prisma__GameBankClient<runtime.Types.Result.GetResult<Prisma.$GameBankPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more GameBanks.
   * @param {GameBankDeleteManyArgs} args - Arguments to filter GameBanks to delete.
   * @example
   * // Delete a few GameBanks
   * const { count } = await prisma.gameBank.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends GameBankDeleteManyArgs>(args?: Prisma.SelectSubset<T, GameBankDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more GameBanks.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GameBankUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many GameBanks
   * const gameBank = await prisma.gameBank.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends GameBankUpdateManyArgs>(args: Prisma.SelectSubset<T, GameBankUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more GameBanks and returns the data updated in the database.
   * @param {GameBankUpdateManyAndReturnArgs} args - Arguments to update many GameBanks.
   * @example
   * // Update many GameBanks
   * const gameBank = await prisma.gameBank.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more GameBanks and only return the `id`
   * const gameBankWithIdOnly = await prisma.gameBank.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends GameBankUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, GameBankUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GameBankPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one GameBank.
   * @param {GameBankUpsertArgs} args - Arguments to update or create a GameBank.
   * @example
   * // Update or create a GameBank
   * const gameBank = await prisma.gameBank.upsert({
   *   create: {
   *     // ... data to create a GameBank
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the GameBank we want to update
   *   }
   * })
   */
  upsert<T extends GameBankUpsertArgs>(args: Prisma.SelectSubset<T, GameBankUpsertArgs<ExtArgs>>): Prisma.Prisma__GameBankClient<runtime.Types.Result.GetResult<Prisma.$GameBankPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of GameBanks.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GameBankCountArgs} args - Arguments to filter GameBanks to count.
   * @example
   * // Count the number of GameBanks
   * const count = await prisma.gameBank.count({
   *   where: {
   *     // ... the filter for the GameBanks we want to count
   *   }
   * })
  **/
  count<T extends GameBankCountArgs>(
    args?: Prisma.Subset<T, GameBankCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], GameBankCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a GameBank.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GameBankAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends GameBankAggregateArgs>(args: Prisma.Subset<T, GameBankAggregateArgs>): Prisma.PrismaPromise<GetGameBankAggregateType<T>>

  /**
   * Group by GameBank.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GameBankGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends GameBankGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: GameBankGroupByArgs['orderBy'] }
      : { orderBy?: GameBankGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, GameBankGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGameBankGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the GameBank model
 */
readonly fields: GameBankFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for GameBank.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__GameBankClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  shop<T extends Prisma.ShopDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ShopDefaultArgs<ExtArgs>>): Prisma.Prisma__ShopClient<runtime.Types.Result.GetResult<Prisma.$ShopPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the GameBank model
 */
export interface GameBankFieldRefs {
  readonly id: Prisma.FieldRef<"GameBank", 'String'>
  readonly slots: Prisma.FieldRef<"GameBank", 'Float'>
  readonly little: Prisma.FieldRef<"GameBank", 'Float'>
  readonly table_bank: Prisma.FieldRef<"GameBank", 'Float'>
  readonly bonus: Prisma.FieldRef<"GameBank", 'Float'>
  readonly temp_rtp: Prisma.FieldRef<"GameBank", 'Float'>
  readonly shop_id: Prisma.FieldRef<"GameBank", 'String'>
}
    

// Custom InputTypes
/**
 * GameBank findUnique
 */
export type GameBankFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameBank
   */
  select?: Prisma.GameBankSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameBank
   */
  omit?: Prisma.GameBankOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameBankInclude<ExtArgs> | null
  /**
   * Filter, which GameBank to fetch.
   */
  where: Prisma.GameBankWhereUniqueInput
}

/**
 * GameBank findUniqueOrThrow
 */
export type GameBankFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameBank
   */
  select?: Prisma.GameBankSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameBank
   */
  omit?: Prisma.GameBankOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameBankInclude<ExtArgs> | null
  /**
   * Filter, which GameBank to fetch.
   */
  where: Prisma.GameBankWhereUniqueInput
}

/**
 * GameBank findFirst
 */
export type GameBankFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameBank
   */
  select?: Prisma.GameBankSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameBank
   */
  omit?: Prisma.GameBankOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameBankInclude<ExtArgs> | null
  /**
   * Filter, which GameBank to fetch.
   */
  where?: Prisma.GameBankWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of GameBanks to fetch.
   */
  orderBy?: Prisma.GameBankOrderByWithRelationInput | Prisma.GameBankOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for GameBanks.
   */
  cursor?: Prisma.GameBankWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` GameBanks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` GameBanks.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of GameBanks.
   */
  distinct?: Prisma.GameBankScalarFieldEnum | Prisma.GameBankScalarFieldEnum[]
}

/**
 * GameBank findFirstOrThrow
 */
export type GameBankFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameBank
   */
  select?: Prisma.GameBankSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameBank
   */
  omit?: Prisma.GameBankOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameBankInclude<ExtArgs> | null
  /**
   * Filter, which GameBank to fetch.
   */
  where?: Prisma.GameBankWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of GameBanks to fetch.
   */
  orderBy?: Prisma.GameBankOrderByWithRelationInput | Prisma.GameBankOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for GameBanks.
   */
  cursor?: Prisma.GameBankWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` GameBanks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` GameBanks.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of GameBanks.
   */
  distinct?: Prisma.GameBankScalarFieldEnum | Prisma.GameBankScalarFieldEnum[]
}

/**
 * GameBank findMany
 */
export type GameBankFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameBank
   */
  select?: Prisma.GameBankSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameBank
   */
  omit?: Prisma.GameBankOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameBankInclude<ExtArgs> | null
  /**
   * Filter, which GameBanks to fetch.
   */
  where?: Prisma.GameBankWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of GameBanks to fetch.
   */
  orderBy?: Prisma.GameBankOrderByWithRelationInput | Prisma.GameBankOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing GameBanks.
   */
  cursor?: Prisma.GameBankWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` GameBanks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` GameBanks.
   */
  skip?: number
  distinct?: Prisma.GameBankScalarFieldEnum | Prisma.GameBankScalarFieldEnum[]
}

/**
 * GameBank create
 */
export type GameBankCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameBank
   */
  select?: Prisma.GameBankSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameBank
   */
  omit?: Prisma.GameBankOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameBankInclude<ExtArgs> | null
  /**
   * The data needed to create a GameBank.
   */
  data: Prisma.XOR<Prisma.GameBankCreateInput, Prisma.GameBankUncheckedCreateInput>
}

/**
 * GameBank createMany
 */
export type GameBankCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many GameBanks.
   */
  data: Prisma.GameBankCreateManyInput | Prisma.GameBankCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * GameBank createManyAndReturn
 */
export type GameBankCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameBank
   */
  select?: Prisma.GameBankSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the GameBank
   */
  omit?: Prisma.GameBankOmit<ExtArgs> | null
  /**
   * The data used to create many GameBanks.
   */
  data: Prisma.GameBankCreateManyInput | Prisma.GameBankCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameBankIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * GameBank update
 */
export type GameBankUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameBank
   */
  select?: Prisma.GameBankSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameBank
   */
  omit?: Prisma.GameBankOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameBankInclude<ExtArgs> | null
  /**
   * The data needed to update a GameBank.
   */
  data: Prisma.XOR<Prisma.GameBankUpdateInput, Prisma.GameBankUncheckedUpdateInput>
  /**
   * Choose, which GameBank to update.
   */
  where: Prisma.GameBankWhereUniqueInput
}

/**
 * GameBank updateMany
 */
export type GameBankUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update GameBanks.
   */
  data: Prisma.XOR<Prisma.GameBankUpdateManyMutationInput, Prisma.GameBankUncheckedUpdateManyInput>
  /**
   * Filter which GameBanks to update
   */
  where?: Prisma.GameBankWhereInput
  /**
   * Limit how many GameBanks to update.
   */
  limit?: number
}

/**
 * GameBank updateManyAndReturn
 */
export type GameBankUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameBank
   */
  select?: Prisma.GameBankSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the GameBank
   */
  omit?: Prisma.GameBankOmit<ExtArgs> | null
  /**
   * The data used to update GameBanks.
   */
  data: Prisma.XOR<Prisma.GameBankUpdateManyMutationInput, Prisma.GameBankUncheckedUpdateManyInput>
  /**
   * Filter which GameBanks to update
   */
  where?: Prisma.GameBankWhereInput
  /**
   * Limit how many GameBanks to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameBankIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * GameBank upsert
 */
export type GameBankUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameBank
   */
  select?: Prisma.GameBankSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameBank
   */
  omit?: Prisma.GameBankOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameBankInclude<ExtArgs> | null
  /**
   * The filter to search for the GameBank to update in case it exists.
   */
  where: Prisma.GameBankWhereUniqueInput
  /**
   * In case the GameBank found by the `where` argument doesn't exist, create a new GameBank with this data.
   */
  create: Prisma.XOR<Prisma.GameBankCreateInput, Prisma.GameBankUncheckedCreateInput>
  /**
   * In case the GameBank was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.GameBankUpdateInput, Prisma.GameBankUncheckedUpdateInput>
}

/**
 * GameBank delete
 */
export type GameBankDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameBank
   */
  select?: Prisma.GameBankSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameBank
   */
  omit?: Prisma.GameBankOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameBankInclude<ExtArgs> | null
  /**
   * Filter which GameBank to delete.
   */
  where: Prisma.GameBankWhereUniqueInput
}

/**
 * GameBank deleteMany
 */
export type GameBankDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which GameBanks to delete
   */
  where?: Prisma.GameBankWhereInput
  /**
   * Limit how many GameBanks to delete.
   */
  limit?: number
}

/**
 * GameBank without action
 */
export type GameBankDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameBank
   */
  select?: Prisma.GameBankSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameBank
   */
  omit?: Prisma.GameBankOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameBankInclude<ExtArgs> | null
}
