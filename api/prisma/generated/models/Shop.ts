
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Shop` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Shop
 * 
 */
export type ShopModel = runtime.Types.Result.DefaultSelection<Prisma.$ShopPayload>

export type AggregateShop = {
  _count: ShopCountAggregateOutputType | null
  _avg: ShopAvgAggregateOutputType | null
  _sum: ShopSumAggregateOutputType | null
  _min: ShopMinAggregateOutputType | null
  _max: ShopMaxAggregateOutputType | null
}

export type ShopAvgAggregateOutputType = {
  percent: number | null
  maxWin: number | null
}

export type ShopSumAggregateOutputType = {
  percent: number | null
  maxWin: number | null
}

export type ShopMinAggregateOutputType = {
  id: string | null
  percent: number | null
  maxWin: number | null
}

export type ShopMaxAggregateOutputType = {
  id: string | null
  percent: number | null
  maxWin: number | null
}

export type ShopCountAggregateOutputType = {
  id: number
  percent: number
  maxWin: number
  _all: number
}


export type ShopAvgAggregateInputType = {
  percent?: true
  maxWin?: true
}

export type ShopSumAggregateInputType = {
  percent?: true
  maxWin?: true
}

export type ShopMinAggregateInputType = {
  id?: true
  percent?: true
  maxWin?: true
}

export type ShopMaxAggregateInputType = {
  id?: true
  percent?: true
  maxWin?: true
}

export type ShopCountAggregateInputType = {
  id?: true
  percent?: true
  maxWin?: true
  _all?: true
}

export type ShopAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Shop to aggregate.
   */
  where?: Prisma.ShopWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Shops to fetch.
   */
  orderBy?: Prisma.ShopOrderByWithRelationInput | Prisma.ShopOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ShopWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Shops from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Shops.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Shops
  **/
  _count?: true | ShopCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ShopAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ShopSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ShopMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ShopMaxAggregateInputType
}

export type GetShopAggregateType<T extends ShopAggregateArgs> = {
      [P in keyof T & keyof AggregateShop]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateShop[P]>
    : Prisma.GetScalarType<T[P], AggregateShop[P]>
}




export type ShopGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ShopWhereInput
  orderBy?: Prisma.ShopOrderByWithAggregationInput | Prisma.ShopOrderByWithAggregationInput[]
  by: Prisma.ShopScalarFieldEnum[] | Prisma.ShopScalarFieldEnum
  having?: Prisma.ShopScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ShopCountAggregateInputType | true
  _avg?: ShopAvgAggregateInputType
  _sum?: ShopSumAggregateInputType
  _min?: ShopMinAggregateInputType
  _max?: ShopMaxAggregateInputType
}

export type ShopGroupByOutputType = {
  id: string
  percent: number
  maxWin: number
  _count: ShopCountAggregateOutputType | null
  _avg: ShopAvgAggregateOutputType | null
  _sum: ShopSumAggregateOutputType | null
  _min: ShopMinAggregateOutputType | null
  _max: ShopMaxAggregateOutputType | null
}

type GetShopGroupByPayload<T extends ShopGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ShopGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ShopGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ShopGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ShopGroupByOutputType[P]>
      }
    >
  > 



export type ShopWhereInput = {
  AND?: Prisma.ShopWhereInput | Prisma.ShopWhereInput[]
  OR?: Prisma.ShopWhereInput[]
  NOT?: Prisma.ShopWhereInput | Prisma.ShopWhereInput[]
  id?: Prisma.StringFilter<"Shop"> | string
  percent?: Prisma.FloatFilter<"Shop"> | number
  maxWin?: Prisma.FloatFilter<"Shop"> | number
  gameBanks?: Prisma.GameBankListRelationFilter
  userProfiles?: Prisma.UserProfileListRelationFilter
}

export type ShopOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  percent?: Prisma.SortOrder
  maxWin?: Prisma.SortOrder
  gameBanks?: Prisma.GameBankOrderByRelationAggregateInput
  userProfiles?: Prisma.UserProfileOrderByRelationAggregateInput
}

export type ShopWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ShopWhereInput | Prisma.ShopWhereInput[]
  OR?: Prisma.ShopWhereInput[]
  NOT?: Prisma.ShopWhereInput | Prisma.ShopWhereInput[]
  percent?: Prisma.FloatFilter<"Shop"> | number
  maxWin?: Prisma.FloatFilter<"Shop"> | number
  gameBanks?: Prisma.GameBankListRelationFilter
  userProfiles?: Prisma.UserProfileListRelationFilter
}, "id">

export type ShopOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  percent?: Prisma.SortOrder
  maxWin?: Prisma.SortOrder
  _count?: Prisma.ShopCountOrderByAggregateInput
  _avg?: Prisma.ShopAvgOrderByAggregateInput
  _max?: Prisma.ShopMaxOrderByAggregateInput
  _min?: Prisma.ShopMinOrderByAggregateInput
  _sum?: Prisma.ShopSumOrderByAggregateInput
}

export type ShopScalarWhereWithAggregatesInput = {
  AND?: Prisma.ShopScalarWhereWithAggregatesInput | Prisma.ShopScalarWhereWithAggregatesInput[]
  OR?: Prisma.ShopScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ShopScalarWhereWithAggregatesInput | Prisma.ShopScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Shop"> | string
  percent?: Prisma.FloatWithAggregatesFilter<"Shop"> | number
  maxWin?: Prisma.FloatWithAggregatesFilter<"Shop"> | number
}

export type ShopCreateInput = {
  id: string
  percent: number
  maxWin: number
  gameBanks?: Prisma.GameBankCreateNestedManyWithoutShopInput
  userProfiles?: Prisma.UserProfileCreateNestedManyWithoutShopInput
}

export type ShopUncheckedCreateInput = {
  id: string
  percent: number
  maxWin: number
  gameBanks?: Prisma.GameBankUncheckedCreateNestedManyWithoutShopInput
  userProfiles?: Prisma.UserProfileUncheckedCreateNestedManyWithoutShopInput
}

export type ShopUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  percent?: Prisma.FloatFieldUpdateOperationsInput | number
  maxWin?: Prisma.FloatFieldUpdateOperationsInput | number
  gameBanks?: Prisma.GameBankUpdateManyWithoutShopNestedInput
  userProfiles?: Prisma.UserProfileUpdateManyWithoutShopNestedInput
}

export type ShopUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  percent?: Prisma.FloatFieldUpdateOperationsInput | number
  maxWin?: Prisma.FloatFieldUpdateOperationsInput | number
  gameBanks?: Prisma.GameBankUncheckedUpdateManyWithoutShopNestedInput
  userProfiles?: Prisma.UserProfileUncheckedUpdateManyWithoutShopNestedInput
}

export type ShopCreateManyInput = {
  id: string
  percent: number
  maxWin: number
}

export type ShopUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  percent?: Prisma.FloatFieldUpdateOperationsInput | number
  maxWin?: Prisma.FloatFieldUpdateOperationsInput | number
}

export type ShopUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  percent?: Prisma.FloatFieldUpdateOperationsInput | number
  maxWin?: Prisma.FloatFieldUpdateOperationsInput | number
}

export type ShopScalarRelationFilter = {
  is?: Prisma.ShopWhereInput
  isNot?: Prisma.ShopWhereInput
}

export type ShopCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  percent?: Prisma.SortOrder
  maxWin?: Prisma.SortOrder
}

export type ShopAvgOrderByAggregateInput = {
  percent?: Prisma.SortOrder
  maxWin?: Prisma.SortOrder
}

export type ShopMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  percent?: Prisma.SortOrder
  maxWin?: Prisma.SortOrder
}

export type ShopMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  percent?: Prisma.SortOrder
  maxWin?: Prisma.SortOrder
}

export type ShopSumOrderByAggregateInput = {
  percent?: Prisma.SortOrder
  maxWin?: Prisma.SortOrder
}

export type ShopNullableScalarRelationFilter = {
  is?: Prisma.ShopWhereInput | null
  isNot?: Prisma.ShopWhereInput | null
}

export type ShopCreateNestedOneWithoutGameBanksInput = {
  create?: Prisma.XOR<Prisma.ShopCreateWithoutGameBanksInput, Prisma.ShopUncheckedCreateWithoutGameBanksInput>
  connectOrCreate?: Prisma.ShopCreateOrConnectWithoutGameBanksInput
  connect?: Prisma.ShopWhereUniqueInput
}

export type ShopUpdateOneRequiredWithoutGameBanksNestedInput = {
  create?: Prisma.XOR<Prisma.ShopCreateWithoutGameBanksInput, Prisma.ShopUncheckedCreateWithoutGameBanksInput>
  connectOrCreate?: Prisma.ShopCreateOrConnectWithoutGameBanksInput
  upsert?: Prisma.ShopUpsertWithoutGameBanksInput
  connect?: Prisma.ShopWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ShopUpdateToOneWithWhereWithoutGameBanksInput, Prisma.ShopUpdateWithoutGameBanksInput>, Prisma.ShopUncheckedUpdateWithoutGameBanksInput>
}

export type ShopCreateNestedOneWithoutUserProfilesInput = {
  create?: Prisma.XOR<Prisma.ShopCreateWithoutUserProfilesInput, Prisma.ShopUncheckedCreateWithoutUserProfilesInput>
  connectOrCreate?: Prisma.ShopCreateOrConnectWithoutUserProfilesInput
  connect?: Prisma.ShopWhereUniqueInput
}

export type ShopUpdateOneWithoutUserProfilesNestedInput = {
  create?: Prisma.XOR<Prisma.ShopCreateWithoutUserProfilesInput, Prisma.ShopUncheckedCreateWithoutUserProfilesInput>
  connectOrCreate?: Prisma.ShopCreateOrConnectWithoutUserProfilesInput
  upsert?: Prisma.ShopUpsertWithoutUserProfilesInput
  disconnect?: Prisma.ShopWhereInput | boolean
  delete?: Prisma.ShopWhereInput | boolean
  connect?: Prisma.ShopWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ShopUpdateToOneWithWhereWithoutUserProfilesInput, Prisma.ShopUpdateWithoutUserProfilesInput>, Prisma.ShopUncheckedUpdateWithoutUserProfilesInput>
}

export type ShopCreateWithoutGameBanksInput = {
  id: string
  percent: number
  maxWin: number
  userProfiles?: Prisma.UserProfileCreateNestedManyWithoutShopInput
}

export type ShopUncheckedCreateWithoutGameBanksInput = {
  id: string
  percent: number
  maxWin: number
  userProfiles?: Prisma.UserProfileUncheckedCreateNestedManyWithoutShopInput
}

export type ShopCreateOrConnectWithoutGameBanksInput = {
  where: Prisma.ShopWhereUniqueInput
  create: Prisma.XOR<Prisma.ShopCreateWithoutGameBanksInput, Prisma.ShopUncheckedCreateWithoutGameBanksInput>
}

export type ShopUpsertWithoutGameBanksInput = {
  update: Prisma.XOR<Prisma.ShopUpdateWithoutGameBanksInput, Prisma.ShopUncheckedUpdateWithoutGameBanksInput>
  create: Prisma.XOR<Prisma.ShopCreateWithoutGameBanksInput, Prisma.ShopUncheckedCreateWithoutGameBanksInput>
  where?: Prisma.ShopWhereInput
}

export type ShopUpdateToOneWithWhereWithoutGameBanksInput = {
  where?: Prisma.ShopWhereInput
  data: Prisma.XOR<Prisma.ShopUpdateWithoutGameBanksInput, Prisma.ShopUncheckedUpdateWithoutGameBanksInput>
}

export type ShopUpdateWithoutGameBanksInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  percent?: Prisma.FloatFieldUpdateOperationsInput | number
  maxWin?: Prisma.FloatFieldUpdateOperationsInput | number
  userProfiles?: Prisma.UserProfileUpdateManyWithoutShopNestedInput
}

export type ShopUncheckedUpdateWithoutGameBanksInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  percent?: Prisma.FloatFieldUpdateOperationsInput | number
  maxWin?: Prisma.FloatFieldUpdateOperationsInput | number
  userProfiles?: Prisma.UserProfileUncheckedUpdateManyWithoutShopNestedInput
}

export type ShopCreateWithoutUserProfilesInput = {
  id: string
  percent: number
  maxWin: number
  gameBanks?: Prisma.GameBankCreateNestedManyWithoutShopInput
}

export type ShopUncheckedCreateWithoutUserProfilesInput = {
  id: string
  percent: number
  maxWin: number
  gameBanks?: Prisma.GameBankUncheckedCreateNestedManyWithoutShopInput
}

export type ShopCreateOrConnectWithoutUserProfilesInput = {
  where: Prisma.ShopWhereUniqueInput
  create: Prisma.XOR<Prisma.ShopCreateWithoutUserProfilesInput, Prisma.ShopUncheckedCreateWithoutUserProfilesInput>
}

export type ShopUpsertWithoutUserProfilesInput = {
  update: Prisma.XOR<Prisma.ShopUpdateWithoutUserProfilesInput, Prisma.ShopUncheckedUpdateWithoutUserProfilesInput>
  create: Prisma.XOR<Prisma.ShopCreateWithoutUserProfilesInput, Prisma.ShopUncheckedCreateWithoutUserProfilesInput>
  where?: Prisma.ShopWhereInput
}

export type ShopUpdateToOneWithWhereWithoutUserProfilesInput = {
  where?: Prisma.ShopWhereInput
  data: Prisma.XOR<Prisma.ShopUpdateWithoutUserProfilesInput, Prisma.ShopUncheckedUpdateWithoutUserProfilesInput>
}

export type ShopUpdateWithoutUserProfilesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  percent?: Prisma.FloatFieldUpdateOperationsInput | number
  maxWin?: Prisma.FloatFieldUpdateOperationsInput | number
  gameBanks?: Prisma.GameBankUpdateManyWithoutShopNestedInput
}

export type ShopUncheckedUpdateWithoutUserProfilesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  percent?: Prisma.FloatFieldUpdateOperationsInput | number
  maxWin?: Prisma.FloatFieldUpdateOperationsInput | number
  gameBanks?: Prisma.GameBankUncheckedUpdateManyWithoutShopNestedInput
}


/**
 * Count Type ShopCountOutputType
 */

export type ShopCountOutputType = {
  gameBanks: number
  userProfiles: number
}

export type ShopCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  gameBanks?: boolean | ShopCountOutputTypeCountGameBanksArgs
  userProfiles?: boolean | ShopCountOutputTypeCountUserProfilesArgs
}

/**
 * ShopCountOutputType without action
 */
export type ShopCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ShopCountOutputType
   */
  select?: Prisma.ShopCountOutputTypeSelect<ExtArgs> | null
}

/**
 * ShopCountOutputType without action
 */
export type ShopCountOutputTypeCountGameBanksArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.GameBankWhereInput
}

/**
 * ShopCountOutputType without action
 */
export type ShopCountOutputTypeCountUserProfilesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UserProfileWhereInput
}


export type ShopSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  percent?: boolean
  maxWin?: boolean
  gameBanks?: boolean | Prisma.Shop$gameBanksArgs<ExtArgs>
  userProfiles?: boolean | Prisma.Shop$userProfilesArgs<ExtArgs>
  _count?: boolean | Prisma.ShopCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["shop"]>

export type ShopSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  percent?: boolean
  maxWin?: boolean
}, ExtArgs["result"]["shop"]>

export type ShopSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  percent?: boolean
  maxWin?: boolean
}, ExtArgs["result"]["shop"]>

export type ShopSelectScalar = {
  id?: boolean
  percent?: boolean
  maxWin?: boolean
}

export type ShopOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "percent" | "maxWin", ExtArgs["result"]["shop"]>
export type ShopInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  gameBanks?: boolean | Prisma.Shop$gameBanksArgs<ExtArgs>
  userProfiles?: boolean | Prisma.Shop$userProfilesArgs<ExtArgs>
  _count?: boolean | Prisma.ShopCountOutputTypeDefaultArgs<ExtArgs>
}
export type ShopIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type ShopIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $ShopPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Shop"
  objects: {
    gameBanks: Prisma.$GameBankPayload<ExtArgs>[]
    userProfiles: Prisma.$UserProfilePayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    percent: number
    maxWin: number
  }, ExtArgs["result"]["shop"]>
  composites: {}
}

export type ShopGetPayload<S extends boolean | null | undefined | ShopDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ShopPayload, S>

export type ShopCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ShopFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ShopCountAggregateInputType | true
  }

export interface ShopDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Shop'], meta: { name: 'Shop' } }
  /**
   * Find zero or one Shop that matches the filter.
   * @param {ShopFindUniqueArgs} args - Arguments to find a Shop
   * @example
   * // Get one Shop
   * const shop = await prisma.shop.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ShopFindUniqueArgs>(args: Prisma.SelectSubset<T, ShopFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ShopClient<runtime.Types.Result.GetResult<Prisma.$ShopPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Shop that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ShopFindUniqueOrThrowArgs} args - Arguments to find a Shop
   * @example
   * // Get one Shop
   * const shop = await prisma.shop.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ShopFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ShopFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ShopClient<runtime.Types.Result.GetResult<Prisma.$ShopPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Shop that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ShopFindFirstArgs} args - Arguments to find a Shop
   * @example
   * // Get one Shop
   * const shop = await prisma.shop.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ShopFindFirstArgs>(args?: Prisma.SelectSubset<T, ShopFindFirstArgs<ExtArgs>>): Prisma.Prisma__ShopClient<runtime.Types.Result.GetResult<Prisma.$ShopPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Shop that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ShopFindFirstOrThrowArgs} args - Arguments to find a Shop
   * @example
   * // Get one Shop
   * const shop = await prisma.shop.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ShopFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ShopFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ShopClient<runtime.Types.Result.GetResult<Prisma.$ShopPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Shops that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ShopFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Shops
   * const shops = await prisma.shop.findMany()
   * 
   * // Get first 10 Shops
   * const shops = await prisma.shop.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const shopWithIdOnly = await prisma.shop.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ShopFindManyArgs>(args?: Prisma.SelectSubset<T, ShopFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ShopPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Shop.
   * @param {ShopCreateArgs} args - Arguments to create a Shop.
   * @example
   * // Create one Shop
   * const Shop = await prisma.shop.create({
   *   data: {
   *     // ... data to create a Shop
   *   }
   * })
   * 
   */
  create<T extends ShopCreateArgs>(args: Prisma.SelectSubset<T, ShopCreateArgs<ExtArgs>>): Prisma.Prisma__ShopClient<runtime.Types.Result.GetResult<Prisma.$ShopPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Shops.
   * @param {ShopCreateManyArgs} args - Arguments to create many Shops.
   * @example
   * // Create many Shops
   * const shop = await prisma.shop.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ShopCreateManyArgs>(args?: Prisma.SelectSubset<T, ShopCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Shops and returns the data saved in the database.
   * @param {ShopCreateManyAndReturnArgs} args - Arguments to create many Shops.
   * @example
   * // Create many Shops
   * const shop = await prisma.shop.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Shops and only return the `id`
   * const shopWithIdOnly = await prisma.shop.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ShopCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ShopCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ShopPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Shop.
   * @param {ShopDeleteArgs} args - Arguments to delete one Shop.
   * @example
   * // Delete one Shop
   * const Shop = await prisma.shop.delete({
   *   where: {
   *     // ... filter to delete one Shop
   *   }
   * })
   * 
   */
  delete<T extends ShopDeleteArgs>(args: Prisma.SelectSubset<T, ShopDeleteArgs<ExtArgs>>): Prisma.Prisma__ShopClient<runtime.Types.Result.GetResult<Prisma.$ShopPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Shop.
   * @param {ShopUpdateArgs} args - Arguments to update one Shop.
   * @example
   * // Update one Shop
   * const shop = await prisma.shop.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ShopUpdateArgs>(args: Prisma.SelectSubset<T, ShopUpdateArgs<ExtArgs>>): Prisma.Prisma__ShopClient<runtime.Types.Result.GetResult<Prisma.$ShopPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Shops.
   * @param {ShopDeleteManyArgs} args - Arguments to filter Shops to delete.
   * @example
   * // Delete a few Shops
   * const { count } = await prisma.shop.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ShopDeleteManyArgs>(args?: Prisma.SelectSubset<T, ShopDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Shops.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ShopUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Shops
   * const shop = await prisma.shop.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ShopUpdateManyArgs>(args: Prisma.SelectSubset<T, ShopUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Shops and returns the data updated in the database.
   * @param {ShopUpdateManyAndReturnArgs} args - Arguments to update many Shops.
   * @example
   * // Update many Shops
   * const shop = await prisma.shop.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Shops and only return the `id`
   * const shopWithIdOnly = await prisma.shop.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ShopUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ShopUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ShopPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Shop.
   * @param {ShopUpsertArgs} args - Arguments to update or create a Shop.
   * @example
   * // Update or create a Shop
   * const shop = await prisma.shop.upsert({
   *   create: {
   *     // ... data to create a Shop
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Shop we want to update
   *   }
   * })
   */
  upsert<T extends ShopUpsertArgs>(args: Prisma.SelectSubset<T, ShopUpsertArgs<ExtArgs>>): Prisma.Prisma__ShopClient<runtime.Types.Result.GetResult<Prisma.$ShopPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Shops.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ShopCountArgs} args - Arguments to filter Shops to count.
   * @example
   * // Count the number of Shops
   * const count = await prisma.shop.count({
   *   where: {
   *     // ... the filter for the Shops we want to count
   *   }
   * })
  **/
  count<T extends ShopCountArgs>(
    args?: Prisma.Subset<T, ShopCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ShopCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Shop.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ShopAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ShopAggregateArgs>(args: Prisma.Subset<T, ShopAggregateArgs>): Prisma.PrismaPromise<GetShopAggregateType<T>>

  /**
   * Group by Shop.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ShopGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ShopGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ShopGroupByArgs['orderBy'] }
      : { orderBy?: ShopGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ShopGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShopGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Shop model
 */
readonly fields: ShopFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Shop.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ShopClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  gameBanks<T extends Prisma.Shop$gameBanksArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Shop$gameBanksArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GameBankPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  userProfiles<T extends Prisma.Shop$userProfilesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Shop$userProfilesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Shop model
 */
export interface ShopFieldRefs {
  readonly id: Prisma.FieldRef<"Shop", 'String'>
  readonly percent: Prisma.FieldRef<"Shop", 'Float'>
  readonly maxWin: Prisma.FieldRef<"Shop", 'Float'>
}
    

// Custom InputTypes
/**
 * Shop findUnique
 */
export type ShopFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Shop
   */
  select?: Prisma.ShopSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Shop
   */
  omit?: Prisma.ShopOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShopInclude<ExtArgs> | null
  /**
   * Filter, which Shop to fetch.
   */
  where: Prisma.ShopWhereUniqueInput
}

/**
 * Shop findUniqueOrThrow
 */
export type ShopFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Shop
   */
  select?: Prisma.ShopSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Shop
   */
  omit?: Prisma.ShopOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShopInclude<ExtArgs> | null
  /**
   * Filter, which Shop to fetch.
   */
  where: Prisma.ShopWhereUniqueInput
}

/**
 * Shop findFirst
 */
export type ShopFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Shop
   */
  select?: Prisma.ShopSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Shop
   */
  omit?: Prisma.ShopOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShopInclude<ExtArgs> | null
  /**
   * Filter, which Shop to fetch.
   */
  where?: Prisma.ShopWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Shops to fetch.
   */
  orderBy?: Prisma.ShopOrderByWithRelationInput | Prisma.ShopOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Shops.
   */
  cursor?: Prisma.ShopWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Shops from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Shops.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Shops.
   */
  distinct?: Prisma.ShopScalarFieldEnum | Prisma.ShopScalarFieldEnum[]
}

/**
 * Shop findFirstOrThrow
 */
export type ShopFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Shop
   */
  select?: Prisma.ShopSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Shop
   */
  omit?: Prisma.ShopOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShopInclude<ExtArgs> | null
  /**
   * Filter, which Shop to fetch.
   */
  where?: Prisma.ShopWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Shops to fetch.
   */
  orderBy?: Prisma.ShopOrderByWithRelationInput | Prisma.ShopOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Shops.
   */
  cursor?: Prisma.ShopWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Shops from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Shops.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Shops.
   */
  distinct?: Prisma.ShopScalarFieldEnum | Prisma.ShopScalarFieldEnum[]
}

/**
 * Shop findMany
 */
export type ShopFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Shop
   */
  select?: Prisma.ShopSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Shop
   */
  omit?: Prisma.ShopOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShopInclude<ExtArgs> | null
  /**
   * Filter, which Shops to fetch.
   */
  where?: Prisma.ShopWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Shops to fetch.
   */
  orderBy?: Prisma.ShopOrderByWithRelationInput | Prisma.ShopOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Shops.
   */
  cursor?: Prisma.ShopWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Shops from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Shops.
   */
  skip?: number
  distinct?: Prisma.ShopScalarFieldEnum | Prisma.ShopScalarFieldEnum[]
}

/**
 * Shop create
 */
export type ShopCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Shop
   */
  select?: Prisma.ShopSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Shop
   */
  omit?: Prisma.ShopOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShopInclude<ExtArgs> | null
  /**
   * The data needed to create a Shop.
   */
  data: Prisma.XOR<Prisma.ShopCreateInput, Prisma.ShopUncheckedCreateInput>
}

/**
 * Shop createMany
 */
export type ShopCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Shops.
   */
  data: Prisma.ShopCreateManyInput | Prisma.ShopCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Shop createManyAndReturn
 */
export type ShopCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Shop
   */
  select?: Prisma.ShopSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Shop
   */
  omit?: Prisma.ShopOmit<ExtArgs> | null
  /**
   * The data used to create many Shops.
   */
  data: Prisma.ShopCreateManyInput | Prisma.ShopCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Shop update
 */
export type ShopUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Shop
   */
  select?: Prisma.ShopSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Shop
   */
  omit?: Prisma.ShopOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShopInclude<ExtArgs> | null
  /**
   * The data needed to update a Shop.
   */
  data: Prisma.XOR<Prisma.ShopUpdateInput, Prisma.ShopUncheckedUpdateInput>
  /**
   * Choose, which Shop to update.
   */
  where: Prisma.ShopWhereUniqueInput
}

/**
 * Shop updateMany
 */
export type ShopUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Shops.
   */
  data: Prisma.XOR<Prisma.ShopUpdateManyMutationInput, Prisma.ShopUncheckedUpdateManyInput>
  /**
   * Filter which Shops to update
   */
  where?: Prisma.ShopWhereInput
  /**
   * Limit how many Shops to update.
   */
  limit?: number
}

/**
 * Shop updateManyAndReturn
 */
export type ShopUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Shop
   */
  select?: Prisma.ShopSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Shop
   */
  omit?: Prisma.ShopOmit<ExtArgs> | null
  /**
   * The data used to update Shops.
   */
  data: Prisma.XOR<Prisma.ShopUpdateManyMutationInput, Prisma.ShopUncheckedUpdateManyInput>
  /**
   * Filter which Shops to update
   */
  where?: Prisma.ShopWhereInput
  /**
   * Limit how many Shops to update.
   */
  limit?: number
}

/**
 * Shop upsert
 */
export type ShopUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Shop
   */
  select?: Prisma.ShopSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Shop
   */
  omit?: Prisma.ShopOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShopInclude<ExtArgs> | null
  /**
   * The filter to search for the Shop to update in case it exists.
   */
  where: Prisma.ShopWhereUniqueInput
  /**
   * In case the Shop found by the `where` argument doesn't exist, create a new Shop with this data.
   */
  create: Prisma.XOR<Prisma.ShopCreateInput, Prisma.ShopUncheckedCreateInput>
  /**
   * In case the Shop was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ShopUpdateInput, Prisma.ShopUncheckedUpdateInput>
}

/**
 * Shop delete
 */
export type ShopDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Shop
   */
  select?: Prisma.ShopSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Shop
   */
  omit?: Prisma.ShopOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShopInclude<ExtArgs> | null
  /**
   * Filter which Shop to delete.
   */
  where: Prisma.ShopWhereUniqueInput
}

/**
 * Shop deleteMany
 */
export type ShopDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Shops to delete
   */
  where?: Prisma.ShopWhereInput
  /**
   * Limit how many Shops to delete.
   */
  limit?: number
}

/**
 * Shop.gameBanks
 */
export type Shop$gameBanksArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GameBank
   */
  select?: Prisma.GameBankSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GameBank
   */
  omit?: Prisma.GameBankOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GameBankInclude<ExtArgs> | null
  where?: Prisma.GameBankWhereInput
  orderBy?: Prisma.GameBankOrderByWithRelationInput | Prisma.GameBankOrderByWithRelationInput[]
  cursor?: Prisma.GameBankWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.GameBankScalarFieldEnum | Prisma.GameBankScalarFieldEnum[]
}

/**
 * Shop.userProfiles
 */
export type Shop$userProfilesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserProfile
   */
  select?: Prisma.UserProfileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserProfile
   */
  omit?: Prisma.UserProfileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserProfileInclude<ExtArgs> | null
  where?: Prisma.UserProfileWhereInput
  orderBy?: Prisma.UserProfileOrderByWithRelationInput | Prisma.UserProfileOrderByWithRelationInput[]
  cursor?: Prisma.UserProfileWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.UserProfileScalarFieldEnum | Prisma.UserProfileScalarFieldEnum[]
}

/**
 * Shop without action
 */
export type ShopDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Shop
   */
  select?: Prisma.ShopSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Shop
   */
  omit?: Prisma.ShopOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ShopInclude<ExtArgs> | null
}
